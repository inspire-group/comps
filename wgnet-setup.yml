- hosts: localhost
  connection: local
  become: true
  gather_facts: false
  vars_files:
    - config.cfg
    - wireguard/defaults/main.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3
    wireguard_remote_directory: ./wg_client_generated

  tasks:
    - name: generate keys
      include_tasks: wireguard/tasks/generate_keys.yml

- hosts: vpn
  remote_user: root
  gather_facts: false

  vars_files:
    - config.cfg
  vars:
    ansible_python_interpreter: /usr/bin/python3

  pre_tasks:
    - name: Register current host index for generating IP address & gateways
      set_fact:
        wireguard_index: "{{ groups['vpn'].index(inventory_hostname) }}"

    - name: Register wireguard subnet address
      set_fact:
        wireguard_address: "{{ wireguard_subnet }}.{{ ((wireguard_index | int) + 5) | string}}"

    - debug:
        msg: "{{wireguard_address}}"

  roles:
    - role: wireguard
      vars:
        # wireguard_interface: "wg{{wireguard_index}}"
        wireguard_endpoint: "{{ inventory_hostname }}:{{ wireguard_port }}"
        wireguard_client_public_key: "{{ hostvars['127.0.0.1'].wireguard__fact_public_key }}"

- hosts: comp
  remote_user: root
  gather_facts: false

  vars_files:
    - config.cfg
  vars:
    ansible_python_interpreter: /usr/bin/python3

  pre_tasks:
    - name: Register current host index for generating IP address & gateways
      set_fact:
        wireguard_interface: "wg0"

    - name: Register wireguard subnet address
      set_fact:
        wireguard_address: "{{ wireguard_subnet }}.100"
    - debug:
        msg: "{{wireguard_address}}"

  roles:
    - role: wireguard
      vars:
        # wireguard_interface: "wg{{wireguard_index}}"
        wireguard_endpoint: "{{ inventory_hostname }}:{{ wireguard_port }}"
        wireguard_client_public_key: "{{ hostvars['127.0.0.1'].wireguard__fact_public_key }}"


- hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - config.cfg

  vars:
    ansible_python_interpreter: /usr/bin/python3
    wireguard_remote_directory: ./wg_client_generated

  tasks:
    - name: Create wg_client_generated directory
      file:
        path: ./wg_client_generated
        state: directory

    - name: Generate confs for wgnet interfaces
      vars:
        # wireguard_client: true
        # wireguard_interface: "wgnet{{ hostvars[item].wireguard_index}}"
        wireguard_endpoint: "{{ hostvars[item].inventory_hostname }}:{{ wireguard_port }}"
        wireguard_public_key: "{{ hostvars[item].wireguard__fact_public_key }}"
        # wireguard_private_key: "{{ hostvars[item].wireguard_private_key }}"
      template:
        src: "client/wgnet.conf"
        dest: "wg_client_generated/wgnet{{hostvars[item].wireguard_index}}.conf"
      with_items:
        "{{ query('inventory_hostnames', 'vpn') }}"

    - name: Generate conf for comps interface
      vars:
        wireguard_interface: "wg0"
        wireguard_endpoint: "{{ hostvars[item].inventory_hostname }}:{{ wireguard_port }}"
        wireguard_public_key: "{{ hostvars[item].wireguard__fact_public_key }}"
      template:
        src: "client/wg0.conf"
        dest: "wg_client_generated/wg0.conf"
      with_items:
        "{{ query('inventory_hostnames', 'comp') }}"

    - name: Generate setup.sh for client
      template:
        src: "client/setup.sh"
        dest: "wg_client_generated/setup.sh"
        mode: "a+x"
    - name: Copy docker-compose file
      copy:
        src: "client/docker-compose.yml"
        dest: "wg_client_generated/docker-compose.yml"
   
      # include_role:
      #   name: wireguard

#     - name: Install setup script
#       template:
#         src: wireguard/templates/client/wg-setup.sh
#         dest: /etc/wireguard/wg-setup.sh
#         owner: root
# 
